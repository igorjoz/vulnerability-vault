<?php

require_once '../app/Services/PathService.php';
require_once '../app/Models/Comment.php';

$commentModel = new Comment();
$comments = $commentModel->getComments();
?>

<style>
    .page__form input[type="text"],
    .page__form textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: none;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
        font-size: 1.8rem;
        color: #000;
    }

    .page__form textarea {
        resize: vertical;
        height: 100px;
    }

    .page__form button:hover {
        background-color: #0056b3;
    }

    .iframe-container {
        width: 100%;
        height: 600px;
        /* Adjust height as needed */
        border: none;
        margin-top: 20px;
    }
</style>

<main class="page__main">
    <article class="page__article">
        <header class="page__article-header">
            <h1 class="page__article-header-text">
                Cross-site Scripting Stored
            </h1>
        </header>

        <section class="page__section page__section--center">
            <div>
                <h2 class="xss__section-header">
                    Opis ataku XSS Stored
                </h2>

                <p class="xss__paragraph">
                    Podatność typu Cross-site Scripting Stored polega na tym, że złośliwy kod JavaScript wprowadzony przez użytkownika jest zapisywany na serwerze i wyświetlany każdemu użytkownikowi, który odwiedza zainfekowaną stronę. Prowadzi to do wykonania złośliwego kodu JavaScript za każdym razem, gdy użytkownik odwiedza stronę ze złośliwym skryptem.
                </p>

                <pre><code class="language-php">if (isset($_POST['comment'])) {
echo $row['comment'];}</code></pre>
            </div>

            <p class="xss__paragraph">
                Na przykład, jeśli użytkownik wprowadzi złośliwy kod w formularzu komentarzy:
            <pre><code class="language-js">&lt;script&gt;alert('XSS Stored')&lt;/script&gt;</code></pre>
            to ten kod zostanie zapisany na serwerze i wyświetli się każdemu, kto odwiedzi stronę z tym komentarzem.
            </p>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Dodaj komentarz
            </h2>

            <form method="POST" action="/vulnerability-vault/comments/create" class="page__form">
                <label for="name" class="page__label">Imię:</label>
                <input type="text" id="name" name="name" required>
                <label for="content" class="page__label">Treść:</label>
                <textarea id="content" name="content" required></textarea>
                <button type="submit">Dodaj komentarz</button>
            </form>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Komentarze niezabezpieczone
            </h2>

            <div class="xss__comments">
                <?php
                // Display stored comments insecurely
                foreach ($comments as $comment) {
                    echo '<div class="xss__comment"><strong>' . $comment['name'] . '</strong>: ' . $comment['content'] . '</div>';
                }
                ?>
            </div>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Komentarze zabezpieczone
            </h2>

            <div class="xss__comments">
                <?php
                // Safely display stored comments
                foreach ($comments as $comment) {
                    echo '<div class="xss__comment"><strong>' . htmlspecialchars($comment['name'], ENT_QUOTES, 'UTF-8') . '</strong>: ' . htmlspecialchars($comment['content'], ENT_QUOTES, 'UTF-8') . '</div>';
                }
                ?>
            </div>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Opis zabezpieczenia
            </h2>

            <div>
                <p class="xss__paragraph">
                    Aby zabezpieczyć się przed atakami typu Stored XSS, należy odpowiednio przetwarzać dane wprowadzane przez użytkowników przed ich zapisaniem i wyświetleniem na stronie. Jednym ze sposobów jest użycie funkcji <code>htmlspecialchars</code>, która konwertuje specjalne znaki na ich bezpieczne odpowiedniki HTML.
                </p>

                <p class="xss__paragraph">
                    W bezpiecznej wersji formularza, jeśli użytkownik wprowadzi złośliwy kod, to zostanie on zapisany i wyświetlony jako tekst, a nie jako kod JavaScript, dzięki czemu nie dojdzie do jego wykonania.
                </p>

                <pre><code class="language-php">if (isset($_POST['comment_secure'])) {
echo htmlspecialchars($_POST['comment_secure'], ENT_QUOTES, 'UTF-8');}</code></pre>
            </div>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Przykłady payloadów
            </h2>

            <p class="xss__paragraph">
                1. Wprowadź
            <pre><code class="language-html">&lt;h1 style="font-size: 500px; color:red;"&gt;Jasio&lt;/h1&gt;</code></pre> w polu komentarza i kliknij "Dodaj komentarz". W wersji wrażliwej na atak zobaczysz wielki czerwony napis "Jasio". W wersji bezpiecznej zobaczysz tylko niezinterpretowany kod HTML.
            </p>

            <p class="xss__paragraph">
                2. Wprowadź
            <pre><code class="language-js">&lt;script&gt;document.body.innerHTML = '&lt;h1&gt;Hacked&lt;/h1&gt;'&lt;/script&gt;</code></pre>
            </p>

            <p class="xss__paragraph">
                3. Wprowadź
            <pre><code class="language-js">&lt;script&gt;alert('Your cookies: ' + document.cookie)&lt;/script&gt;</code></pre>
            </p>

            <p class="xss__paragraph">
                4. Wprowadź
                <code class="xss__code">&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ?si=cxUyYkeDs3rk_qd9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</code>
            </p>

            <p class="xss__paragraph">
                5. Wprowadź
            <pre><code class="language-js">&lt;script&gt; window.location.href = 'https://bit.ly/kocham-js'&lt;/script&gt;</code></pre>
            </p>

            <p class="xss__paragraph">
                6. Wprowadź
                <code class="xss__code language-js">&lt;iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2324.1536653767057!2d18.615339576314607!3d54.37193509749529!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x46fd74905b613ac3%3A0xf7c1c66f1c37f8a6!2sPolitechnika%20Gda%C5%84ska%2C%20Wydzia%C5%82%20Elektrotechniki%20i%20Automatyki!5e0!3m2!1sen!2spl!4v1716672832972!5m2!1sen!2spl" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"&gt;&lt;/&gt;iframe&gt;</code>
            </p>

            <?php PathService::prevNextButton('/xss-reflected', '/sql-injection', 'XSS Reflected', 'SQL Injection'); ?>
        </section>
    </article>
</main>