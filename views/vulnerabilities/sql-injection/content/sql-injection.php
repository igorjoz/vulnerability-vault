<?php
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

require_once '../app/Services/PathService.php';
?>
<title>SQL Injection</title>

<style>
    .page__section form {
        margin-bottom: 20px;
    }

    .page__section form h1 {
        margin-bottom: 10px;
        font-size: 20px;
    }

    .page__section form input[type="text"],
    .page__section form input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }

    .page__section form input[type="submit"] {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
    }

    .page__section form input[type="submit"]:hover {
        background-color: #0056b3;
    }

    code {
        text-align: left;
        display: block;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .language-sql {
        text-align: center;
    }

    form {
        margin-top: 30px;
    }

    h1 {
        margin-top: 30px;
    }

    .user-info {
        margin-top: 20px;
        width: 90%;
        padding: 20px;
        border: none;
        border-radius: 10px;
        background-color: #483D8B;
        color: #fff;
        text-align: center;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.2);
        font-size: 1.2em;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
</style>

<main class="page__main">
    <article class="page__article">
        <header class="page__article-header">
            <h1 class="page__article-header-text">SQL Injection</h1>
        </header>

        <section class="page__section page__section--center">
            <div>
                <h1>Niezabezpieczony formularz</h1>
                <p>
                    SQL Injection to technika, która pozwala atakującemu manipulować zapytaniami SQL, które są wykonywane przez aplikację. Atakujący może wykorzystać to do obejścia uwierzytelniania, wyświetlenia, modyfikacji lub usunięcia danych w bazie danych.
                </p>
                <p>
                    W niezabezpieczonej wersji, dane wprowadzone przez użytkownika są bezpośrednio wstawiane do zapytania SQL. Na przykład, w metodzie sprawdzającej dane logowania
                <pre><code class="language-php">
public function getUnsafe($username, $password) {
    $stmt = $this->pdo->query("SELECT * FROM users WHERE username = '$username' AND password = '$password'");
    return $stmt->fetch(); 
}
                    </code></pre>
                zapytanie SQL jest tworzone przez konkatenację ciągu z danymi wprowadzonymi przez użytkownika. Jeśli atakujący wprowadzi wartości, które zmieniają strukturę zapytania SQL, może to prowadzić do niezamierzonych konsekwencji.
                <br />Metoda getUnsafe zwraca wynik zapytania SQL jako tablicę asocjacyjną,
                gdzie klucze są nazwami kolumn w wyniku zapytania SQL.
                W tym przypadku, zapytanie SQL to
                <pre><code class="language-sql">SELECT * FROM users WHERE username = '$username' AND password = '$password'     </code></pre>
                więc wynik będzie zawierał wszystkie kolumny z tabeli users dla użytkownika, który pasuje do podanego username i password.
                Jednakże, ponieważ metoda getUnsafe jest podatna na ataki SQL Injection, jeśli atakujący wprowadzi specjalnie sformułowane wartości dla username i password,
                może to prowadzić do niezamierzonych wyników. Na przykład, jeśli atakujący wprowadzi
                <pre><code class="language-sql"> ' or ''='  </code></pre>
                jako wartość dla username i password,
                metoda getUnsafe zwróci dane pierwszego użytkownika w tabeli users, niezależnie od tego,
                jakie wartości username i password zostały faktycznie przekazane.
                </p>
                <form action="/user/login#unsafeLoginForm" method="POST" id="unsafeLoginForm">
                    <input type="text" name="username" placeholder="Username">
                    <input type="password" name="password" placeholder="Password">
                    <input type="submit" name="unsafe" value="Log in (Unsafe)">
                </form>

                <div class="user-info">
                    <?php include PathService::layoutComponent("user_info"); ?>
                </div>
            </div>

            <div>
                <h1>Zabezpieczony formularz</h1>
                <p>
                    W zabezpieczonej wersji, dane wprowadzone przez użytkownika są parametryzowane, co oznacza, że są traktowane wyłącznie jako dane, a nie część zapytania SQL. Na przykład, w metodzie zabezpieczonej, która sprawdza dane logowania
                <pre><code class="language-php">
public function getSafe($username, $password) { 
    $stmt = $this->pdo->prepare('SELECT * FROM users WHERE username = ? AND password = ?'); 
    $stmt->execute([$username, $password]); 
    return $stmt->fetch();
 } 
                    </code></pre>
                zapytanie SQL jest przygotowywane z miejscami na parametry, które są później wypełniane danymi wprowadzonymi przez użytkownika. To zapobiega manipulacji struktury zapytania SQL przez atakującego.
                </p>
                <br />
                <p>
                    Parametryzacja zapytań SQL jest zdecydowanie lepsza, ponieważ zapobiega atakom SQL Injection. Nawet jeśli atakujący próbuje wprowadzić wartości, które zmieniają strukturę zapytania SQL, te wartości są traktowane jako dane, a nie jako część zapytania SQL. To oznacza, że atakujący nie może manipulować zapytaniem SQL wykonywanym przez aplikację.
                </p>

                <form action="/user/login#safeLoginForm" method="POST" id="safeLoginForm">
                    <input type="text" name="username" placeholder="Username">
                    <input type="password" name="password" placeholder="Password">
                    <input type="submit" name="safe" value="Log in (Safe)">
                </form>

                <div class="user-info">
                    <?php include PathService::layoutComponent("user_info"); ?>
                </div>

                <form action="/user/register#registerForm" method="POST" id="registerForm">
                    <h1>Dodawanie użytkowników</h1>
                    <input type="text" name="username" placeholder="Username">
                    <input type="password" name="password" placeholder="Password">
                    <input type="submit" name="unsafe" value="Register (Unsafe)">
                    <input type="submit" name="safe" value="Register (Safe)">
                </form>
            </div>

            <?php PathService::prevNextButton('', '/command-injection', 'Home', 'Command Injection'); ?>
        </section>
    </article>
</main>