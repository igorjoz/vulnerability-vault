<main class="page__main">
    <article class="page__article">
        <header class="page__article-header">
            <h1 class="page__article-header-text">
                Cross-site Scripting Reflected
            </h1>
        </header>

        <section class="page__section page__section--center">
            <div>
                <h2 class="xss__section-header">
                    Opis ataku XSS Reflected
                </h2>

                <p class="xss__paragraph">
                    Podatność typu Cross-site Scripting Reflected polega na tym, że wprowadzone dane przez użytkownika są wyświetlane na stronie bez uprzedniej sanityzacji, czyli sprawdzenia na backendzie aplikacji, czy wprowadzone dane nie zawierają znaczników HTML czy kodu JS. Niesanityzowanie wejścia może prowadzić do wykonania dowolnego złośliwego kodu JavaScript.
                </p>

                <pre><code class="langauge-php">if (isset($_GET['name'])) {
echo "Witaj " . $_GET['name'] . "!";}</code></pre>
            </div>

            <p>
                Na przykład, jeśli użytkownik wprowadzi w polu tekstowym:
            <pre><code class="language-js">&lt;script&gt;alert('XSS')&lt;/script&gt;</code></pre>
            to po przesłaniu formularza, przeglądarka wykona ten kod JavaScript, co doprowadzi do wyświetlenia alertu z napisem "XSS".
            </p>
            </div>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Formularz podatny na atak
            </h2>

            <form method="GET" action="" class="page__form">
                <label for="user-input" class="page__label">Podaj imię:</label>
                <input type="text" id="user-input" name="name">
                <button type="submit">Wyślij formularz</button>
            </form>

            <h2 class="xss__section-header">
                Wynik wysłania formularza:
            </h2>

            <h2 class="xss__result">
                <?php
                // XSS Reflected vulnerability
                if (isset($_GET['name'])) {
                    echo "Witaj " . $_GET['name'] . "!";
                } else {
                    echo "(jeszcze nie wysłano formularza)";
                }
                ?>
            </h2>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Zabezpieczony formularz
            </h2>

            <form method="GET" action="" class="page__form">
                <label for="user-input" class="page__label">Podaj imię:</label>
                <input type="text" id="user-input" name="name_secure">
                <button type="submit">Wyślij formularz</button>
            </form>

            <h2 class="xss__result">
                <?php
                // Mitigated XSS vulnerability
                if (isset($_GET['name_secure'])) {
                    echo "Witaj " . htmlspecialchars($_GET['name_secure'], ENT_QUOTES, 'UTF-8') . "!";
                } else {
                    echo "(jeszcze nie wysłano formularza)";
                }
                ?>
            </h2>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Opis zabezpieczenia
            </h2>

            <div>
                <p>
                    Aby zabezpieczyć się przed atakami typu Reflected XSS, należy odpowiednio przetwarzać dane wprowadzane przez użytkowników przed ich wyświetleniem na stronie. Jednym ze sposobów jest użycie funkcji <code>htmlspecialchars</code> która konwertuje specjalne znaki na ich bezpieczne odpowiedniki HTML.
                </p>

                <p>
                    W bezpiecznej wersji formularza, jeśli użytkownik wprowadzi złośliwy kod, to zostanie on wyświetlony na stronie jako tekst, a nie jako kod JavaScript, dzięki czemu nie dojdzie do jego wykonania.
                </p>

                <pre><code class="langauge-php">if (isset($_GET['name_secure'])) {
echo "Witaj " . htmlspecialchars($_GET['name_secure'], ENT_QUOTES, 'UTF-8') . "!";}</code></pre>
            </div>
        </section>

        <hr class="xss__hr">

        <section class="page__section page__section--center">
            <h2 class="xss__section-header">
                Przykłady payloadów
            </h2>

            <p>
                1. Wprowadź
            <pre><code class="language-html">&lt;h1 style="font-size: 500px; color:red;"&gt;Jasio&lt;/h1&gt;</code></pre> w polu tekstowym i kliknij "Wyślij formularz". W wersji wrażliwej na atak zobaczysz wielki czerwony napis "Jasio". W wersji bezpiecznej zobaczysz tylko niezinterpretowany kod HTML.
            </p>

            <p>
                3. Wprowadź
            <pre><code class="language-js">&lt;script&gt;document.body.innerHTML = '&lt;h1&gt;Hacked&lt;/h1&gt;'&lt;/script&gt;</code></pre>
            </p>

            <p>
                4. Wprowadź
            <pre><code class="language-js">&lt;script&gt;alert('Your cookies: ' + document.cookie)&lt;/script&gt;</code></pre>
            </p>


            <script></script>

            <p>
                5. Wprowadź
                <code class="xss__code">&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ?si=cxUyYkeDs3rk_qd9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;</code>
            </p>

            <p>
                6. Wprowadź
            <pre><code class="language-js">&lt;script&gt; window.location.href = 'https://bit.ly/kocham-js'&lt;/script&gt;</code></pre>
            </p>

            <?php PathService::prevNextButton('/file-uploader', '/xss-stored', 'File Uploader', 'XSS Stored'); ?>
        </section>
    </article>
</main>