<title>Command Injection</title>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script>
    hljs.highlightAll();
</script>

<style>
    code {
        text-align: left;
        display: block;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    .code.shell-command {
        text-align: center;
    }
    .page-section-padding {
        padding: 50px;
    }
    .form-spacing {
    margin-bottom: 50px;
    }
</style>

<main class="page__main">
    <article class="page__article">
        <header class="page__article-header">
            <h1 class="page__article-header-text">
                Command Injection
            </h1>
        </header>

        <section class="page__section page__section--center">

            <section class="page__section-padding">
                <h1>Niezabezpieczony formularz</h1>

                <p>
                    Command Injection (wstrzykiwanie poleceń) to technika, która pozwala atakującemu na wykonywanie
                    dowolnych poleceń w systemie operacyjnym za pośrednictwem podatnej aplikacji.
                    W niezabezpieczonej wersji, dane użytkownika są bezpośrednio wstawiane do polecenia systemowego.
                    Na przykład, w metodzie wykonującej polecenie ping:
                    <pre>
                        <code class="language-php">
                        if (isset($_GET['ip'])) {
                            $ip = $_GET['ip'];
                            $output = shell_exec("ping -n 4 " . $ip);
                            echo nl2br($output);
                        }
                        </code>
                    </pre>
                    Polecenie systemowe jest tworzone przez konkatenację ciągu znaków z danymi użytkownika.
                    Jeśli atakujący wprowadzi wartości, które zmieniają strukturę polecenia systemowego,
                    może to prowadzić do niezamierzonych konsekwencji. W szczególności, używane są operatory
                    typu & && | ||, które mogą zmienić strukturę polecenia systemowego. Dzięki temu, atakujący
                    może wykonać dowolne polecenie systemowe na serwerze.
                </p>

                <p>
                    Przykładowy formularz służy do pingowania dowolnej strony internetowej. Do formularza należy
                    wprowadzić adres IP strony, którą chcemy spingować. Następnie, po kliknięciu przycisku "Ping!", zostanie
                    wykonane polecenie systemowe ping na podanym adresie IP. Warto zauważyć, że w niezabezpieczonej
                    wersji, atakujący może wprowadzić dowolne polecenie systemowe, co stanowi zagrożenie dla serwera.
                    <br>
                    Spróbuj wpisać w pole adresu IP nie tylko jakiś adres , ale również jakieś polecenie systemowe,
                    np. whoami, które zwróci nazwę użytkownika, na którym działa serwer.
                    Przykładowo, wprowadź w pole adresu IP następujące dane:
                    <pre>
                        <code class="shell-command">
                            google.com & whoami
                        </code>
                    </pre>
                </p>

                <form method="GET" class="form-spacing" action="">
                    <label for="ip-input">Wprowadź IP do pingu:</label>
                    <input type="text" id="ip-input" name="ip">
                    <button type="submit">Ping! (Niebezpieczne)</button>
                </form>

                <?php
                    if (isset($_GET['ip'])) {
                        $ip = $_GET['ip'];
                        $output = shell_exec("ping -n 4 " . $ip);
                        echo nl2br($output);
                    }
                ?>


                <p style="margin-top:50px">
                    Widzimy, że oprócz standardowego wyjścia polecenia ping, użytkownik dostaje również informację,
                    z jakiego konta zostało wykonane polecenie. W ten sposób, atakujący może dowiedzieć się, na jakim
                    koncie działa serwer. Warto zauważyć, że świadomy tej  podatności użytkownik ma możliwość wykonania
                    DOWOLNEGO polecenia. Może on otwierać oraz modyfikować pliki, a nawet je usuwać! Przykładowo w
                    celu sprawdzenia katalogu głównego serwera, wystarczy wpisać w pole adresu IP następujące dane:
                    <pre>
                        <code class="shell-command">
                            google.com & dir
                        </code>
                    </pre>
                </p>

                <form method="GET" action="" class="form-spacing">
                    <label for="ip-input">Wprowadź IP do pingu:</label>
                    <input type="text" id="ip-input" name="ip2">
                    <button type="submit">Ping! (Niebezpieczne)</button>
                </form>

                <?php
                    if (isset($_GET['ip2'])) {
                        $ip = $_GET['ip2'];
                        $output = shell_exec("ping -n 4 " . $ip);
                        echo nl2br($output);
                    }
                ?>
            </section>

            <section class="page__section-padding">
                <h1>Sposoby obrony przed atakiem</h1>
                <p>
                    Najlepszym sposobem na zabezpieczenie aplikacji przed atakami typu Command Injection jest
                    unikanie bezpośredniego wstawiania danych użytkownika do polecenia systemowego. Jeżeli natomiast 
                    niezbędne jest wykonywanie poleceń systemowych na podstawie danych z formularzy, przede wszystkim
                    należy bardzo dokładnie walidować te dane, aby upewnić się, że nie zawierają one żadnych niebezpiecznych
                    znaków, takich jak & | && ||. Warto również ograniczyć dostęp do poleceń systemowych. Ponadto istnieją
                    alternatywne metody, które pozwalają na bezpieczne wykonywanie poleceń systemowych. Jedną z nich
                    jest użycie funkcji escapeshellarg(), która escapuje dane użytkownika, co oznacza, że są traktowane
                    wyłącznie jako dane, a nie część polecenia systemowego. Na przykład, w zabezpieczonej metodzie,
                    która wykonuje polecenie ping:
                    <pre>
                        <code class="language-php">
                            if (isset($_GET['ip'])) {
                                $ip = escapeshellarg($_GET['ip']);
                                system("ping -n 4 " . $ip);
                            }
                        </code>
                    </pre>
                    Polecenie systemowe jest przygotowane z miejscem na parametr, które jest później wypełniane danymi
                    użytkownika. Zapobiega to manipulacji struktury polecenia systemowego przez atakującego.
                </p>

                <p>
                    Spróbuj wykonać to samo co w poprzednich formularzach, ale na zabezpieczonej wersji formularza.
                    Zobaczysz, że komendy wpisywane do pola adresu IP nie będą wykonywane, a jedynie wyświetlane jako
                    tekst.
                </p>

                <form method="GET" action="" class="form-spacing">
                    <label for="ip-input">Wprowadź IP do pingu:</label>
                    <input type="text" id="ip-input" name="ip3">
                    <button type="submit">Ping! (Bezpieczne)</button>
                </form>

                <?php
                    if (isset($_GET['ip3'])) {
                        $ip = escapeshellarg($_GET['ip3']);
                        $output = shell_exec("ping -n 4 " . $ip);
                        echo nl2br($output);
                    }
                ?>
            </section>

            <?php PathService::prevNextButton('/sql-injection', '/file-uploader'); ?>
        </section>
    </article>
</main>